services:

  db:
    image: postgres:17
    container_name: database
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-data.sql:/docker-entrypoint-initdb.d/init-data.sql

  test:
    image: maven:3.9.9-eclipse-temurin-23-alpine
    container_name: tester
    depends_on:
      - db
    volumes:
      - ./backend:/app
      - /var/run/docker.sock:/var/run/docker.sock  # Concede accesso al daemon Docker
    working_dir: /app
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      TESTCONTAINERS_HOST_OVERRIDE: ${TESTCONTAINERS_HOST_OVERRIDE:-}
    command: >
      sh -c "
        echo 'Running tests...';
        mvn clean test && echo 'Tests PASSED! Building JAR...'
      "


  # APPLICAZIONE (Spring Boot runtime)
  app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8080/actuator/health/readiness"]
      interval: 5s
      timeout: 3s
      retries: 10
    container_name: app-backend
    depends_on:
      - db
      - test
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}

  frontend-test:
    image: node:20-alpine
    container_name: tester-frontend
    working_dir: /app
    volumes:
      - ./app:/app
    depends_on:
      app:
        condition: service_healthy  
    command: >
      sh -c "
        echo 'Running frontend tests...';
        npm install && npm test && echo 'Frontend tests PASSED!'
        "
  frontend:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: app-frontend
    ports:
      - "5173:4173" 
    depends_on:
      - app
      - frontend-test
    environment:
      PORT: 4173
volumes:
  postgres_data: